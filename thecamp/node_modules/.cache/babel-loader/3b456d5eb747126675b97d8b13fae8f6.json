{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Dev\\\\Documents\\\\JavaScript\\\\Thecamp-React\\\\thecamp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:\\\\Users\\\\Dev\\\\Documents\\\\JavaScript\\\\Thecamp-React\\\\thecamp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames'; // ------------------ Helpers\n\nfunction isNumber(n) {\n  var number = parseFloat(n);\n  return !isNaN(number) && isFinite(number);\n}\n\nfunction isPercentage(height) {\n  // Percentage height\n  return typeof height === 'string' && height[height.length - 1] === '%' && isNumber(height.substring(0, height.length - 1));\n}\n\nfunction hideContent(element, height) {\n  // Check for element?.style is added cause this would fail in tests (react-test-renderer)\n  // Read more here: https://github.com/Stanko/react-animate-height/issues/17\n  if (height === 0 && (element === null || element === void 0 ? void 0 : element.style)) {\n    element.style.display = 'none';\n  }\n}\n\nfunction showContent(element, height) {\n  // Check for element?.style is added cause this would fail in tests (react-test-renderer)\n  // Read more here: https://github.com/Stanko/react-animate-height/issues/17\n  if (height === 0 && (element === null || element === void 0 ? void 0 : element.style)) {\n    element.style.display = '';\n  }\n}\n\nvar ANIMATION_STATE_CLASSES = {\n  animating: 'rah-animating',\n  animatingUp: 'rah-animating--up',\n  animatingDown: 'rah-animating--down',\n  animatingToHeightZero: 'rah-animating--to-height-zero',\n  animatingToHeightAuto: 'rah-animating--to-height-auto',\n  animatingToHeightSpecific: 'rah-animating--to-height-specific',\n  static: 'rah-static',\n  staticHeightZero: 'rah-static--height-zero',\n  staticHeightAuto: 'rah-static--height-auto',\n  staticHeightSpecific: 'rah-static--height-specific'\n};\n\nfunction getStaticStateClasses(animationStateClasses, height) {\n  var _classNames;\n\n  return classNames((_classNames = {}, _defineProperty(_classNames, animationStateClasses.static, true), _defineProperty(_classNames, animationStateClasses.staticHeightZero, height === 0), _defineProperty(_classNames, animationStateClasses.staticHeightSpecific, height > 0), _defineProperty(_classNames, animationStateClasses.staticHeightAuto, height === 'auto'), _classNames));\n}\n\nvar AnimateHeight = function AnimateHeight(_a) {\n  var _a$animateOpacity = _a.animateOpacity,\n      animateOpacity = _a$animateOpacity === void 0 ? false : _a$animateOpacity,\n      _a$animationStateClas = _a.animationStateClasses,\n      animationStateClasses = _a$animationStateClas === void 0 ? {} : _a$animationStateClas,\n      _a$applyInlineTransit = _a.applyInlineTransitions,\n      applyInlineTransitions = _a$applyInlineTransit === void 0 ? true : _a$applyInlineTransit,\n      children = _a.children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      contentClassName = _a.contentClassName,\n      _a$delay = _a.delay,\n      userDelay = _a$delay === void 0 ? 0 : _a$delay,\n      _a$duration = _a.duration,\n      userDuration = _a$duration === void 0 ? 500 : _a$duration,\n      _a$easing = _a.easing,\n      easing = _a$easing === void 0 ? 'ease' : _a$easing,\n      height = _a.height,\n      onHeightAnimationEnd = _a.onHeightAnimationEnd,\n      onHeightAnimationStart = _a.onHeightAnimationStart,\n      style = _a.style,\n      props = __rest(_a, [\"animateOpacity\", \"animationStateClasses\", \"applyInlineTransitions\", \"children\", \"className\", \"contentClassName\", \"delay\", \"duration\", \"easing\", \"height\", \"onHeightAnimationEnd\", \"onHeightAnimationStart\", \"style\"]); // ------------------ Initialization\n\n\n  var prevHeight = useRef(height);\n  var contentElement = useRef(null);\n  var animationClassesTimeoutID = useRef();\n  var timeoutID = useRef();\n  var stateClasses = useRef(Object.assign(Object.assign({}, ANIMATION_STATE_CLASSES), animationStateClasses));\n  var isBrowser = typeof window !== 'undefined';\n  var prefersReducedMotion = useRef(isBrowser && window.matchMedia ? window.matchMedia('(prefers-reduced-motion)').matches : false);\n  var delay = prefersReducedMotion.current ? 0 : userDelay;\n  var duration = prefersReducedMotion.current ? 0 : userDuration;\n  var initHeight = height;\n  var initOverflow = 'visible';\n\n  if (typeof initHeight === 'number') {\n    // Reset negative height to 0\n    initHeight = height < 0 ? 0 : height;\n    initOverflow = 'hidden';\n  } else if (isPercentage(initHeight)) {\n    // If value is string \"0%\" make sure we convert it to number 0\n    initHeight = height === '0%' ? 0 : height;\n    initOverflow = 'hidden';\n  }\n\n  var _useState = useState(initHeight),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentHeight = _useState2[0],\n      setCurrentHeight = _useState2[1];\n\n  var _useState3 = useState(initOverflow),\n      _useState4 = _slicedToArray(_useState3, 2),\n      overflow = _useState4[0],\n      setOverflow = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      useTransitions = _useState6[0],\n      setUseTransitions = _useState6[1];\n\n  var _useState7 = useState(getStaticStateClasses(stateClasses.current, height)),\n      _useState8 = _slicedToArray(_useState7, 2),\n      animationStateClassNames = _useState8[0],\n      setAnimationStateClassNames = _useState8[1]; // ------------------ Did mount\n\n\n  useEffect(function () {\n    // Hide content if height is 0 (to prevent tabbing into it)\n    hideContent(contentElement.current, currentHeight); // This should be explicitly run only on mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // ------------------ Height update\n\n  useEffect(function () {\n    if (height !== prevHeight.current && contentElement.current) {\n      var _classNames2;\n\n      showContent(contentElement.current, prevHeight.current); // Cache content height\n\n      contentElement.current.style.overflow = 'hidden';\n      var contentHeight = contentElement.current.offsetHeight;\n      contentElement.current.style.overflow = ''; // set total animation time\n\n      var totalDuration = duration + delay;\n      var newHeight;\n      var timeoutHeight;\n      var timeoutOverflow = 'hidden';\n      var timeoutUseTransitions;\n      var isCurrentHeightAuto = prevHeight.current === 'auto';\n\n      if (typeof height === 'number') {\n        // Reset negative height to 0\n        newHeight = height < 0 ? 0 : height;\n        timeoutHeight = newHeight;\n      } else if (isPercentage(height)) {\n        // If value is string \"0%\" make sure we convert it to number 0\n        newHeight = height === '0%' ? 0 : height;\n        timeoutHeight = newHeight;\n      } else {\n        // If not, animate to content height\n        // and then reset to auto\n        newHeight = contentHeight; // TODO solve contentHeight = 0\n\n        timeoutHeight = 'auto';\n        timeoutOverflow = undefined;\n      }\n\n      if (isCurrentHeightAuto) {\n        // This is the height to be animated to\n        timeoutHeight = newHeight; // If previous height was 'auto'\n        // set starting height explicitly to be able to use transition\n\n        newHeight = contentHeight;\n      } // Animation classes\n\n\n      var newAnimationStateClassNames = classNames((_classNames2 = {}, _defineProperty(_classNames2, stateClasses.current.animating, true), _defineProperty(_classNames2, stateClasses.current.animatingUp, prevHeight.current === 'auto' || height < prevHeight.current), _defineProperty(_classNames2, stateClasses.current.animatingDown, height === 'auto' || height > prevHeight.current), _defineProperty(_classNames2, stateClasses.current.animatingToHeightZero, timeoutHeight === 0), _defineProperty(_classNames2, stateClasses.current.animatingToHeightAuto, timeoutHeight === 'auto'), _defineProperty(_classNames2, stateClasses.current.animatingToHeightSpecific, timeoutHeight > 0), _classNames2)); // Animation classes to be put after animation is complete\n\n      var timeoutAnimationStateClasses = getStaticStateClasses(stateClasses.current, timeoutHeight); // Set starting height and animating classes\n      // When animating from 'auto' we first need to set fixed height\n      // that change should be animated\n\n      setCurrentHeight(newHeight);\n      setOverflow('hidden');\n      setUseTransitions(!isCurrentHeightAuto);\n      setAnimationStateClassNames(newAnimationStateClassNames); // Clear timeouts\n\n      clearTimeout(timeoutID.current);\n      clearTimeout(animationClassesTimeoutID.current);\n\n      if (isCurrentHeightAuto) {\n        // When animating from 'auto' we use a short timeout to start animation\n        // after setting fixed height above\n        timeoutUseTransitions = true; // Short timeout to allow rendering of the initial animation state first\n\n        timeoutID.current = setTimeout(function () {\n          setCurrentHeight(timeoutHeight);\n          setOverflow(timeoutOverflow);\n          setUseTransitions(timeoutUseTransitions); // ANIMATION STARTS, run a callback if it exists\n\n          onHeightAnimationStart === null || onHeightAnimationStart === void 0 ? void 0 : onHeightAnimationStart(timeoutHeight);\n        }, 50); // Set static classes and remove transitions when animation ends\n\n        animationClassesTimeoutID.current = setTimeout(function () {\n          setUseTransitions(false);\n          setAnimationStateClassNames(timeoutAnimationStateClasses); // ANIMATION ENDS\n          // Hide content if height is 0 (to prevent tabbing into it)\n\n          hideContent(contentElement.current, timeoutHeight); // Run a callback if it exists\n\n          onHeightAnimationEnd === null || onHeightAnimationEnd === void 0 ? void 0 : onHeightAnimationEnd(timeoutHeight);\n        }, totalDuration);\n      } else {\n        // ANIMATION STARTS, run a callback if it exists\n        onHeightAnimationStart === null || onHeightAnimationStart === void 0 ? void 0 : onHeightAnimationStart(newHeight); // Set end height, classes and remove transitions when animation is complete\n\n        timeoutID.current = setTimeout(function () {\n          setCurrentHeight(timeoutHeight);\n          setOverflow(timeoutOverflow);\n          setUseTransitions(false);\n          setAnimationStateClassNames(timeoutAnimationStateClasses); // ANIMATION ENDS\n          // If height is auto, don't hide the content\n          // (case when element is empty, therefore height is 0)\n\n          if (height !== 'auto') {\n            // Hide content if height is 0 (to prevent tabbing into it)\n            hideContent(contentElement.current, newHeight); // TODO solve newHeight = 0\n          } // Run a callback if it exists\n\n\n          onHeightAnimationEnd === null || onHeightAnimationEnd === void 0 ? void 0 : onHeightAnimationEnd(newHeight);\n        }, totalDuration);\n      }\n    }\n\n    prevHeight.current = height;\n    return function () {\n      clearTimeout(timeoutID.current);\n      clearTimeout(animationClassesTimeoutID.current);\n    }; // This should be explicitly run only on height change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [height]); // ------------------ Render\n\n  var componentStyle = Object.assign(Object.assign({}, style), {\n    height: currentHeight,\n    overflow: overflow || (style === null || style === void 0 ? void 0 : style.overflow)\n  });\n\n  if (useTransitions && applyInlineTransitions) {\n    componentStyle.transition = \"height \".concat(duration, \"ms \").concat(easing, \" \").concat(delay, \"ms\"); // Include transition passed through styles\n\n    if (style === null || style === void 0 ? void 0 : style.transition) {\n      componentStyle.transition = \"\".concat(style.transition, \", \").concat(componentStyle.transition);\n    } // Add webkit vendor prefix still used by opera, blackberry...\n\n\n    componentStyle.WebkitTransition = componentStyle.transition;\n  }\n\n  var contentStyle = {};\n\n  if (animateOpacity) {\n    contentStyle.transition = \"opacity \".concat(duration, \"ms \").concat(easing, \" \").concat(delay, \"ms\"); // Add webkit vendor prefix still used by opera, blackberry...\n\n    contentStyle.WebkitTransition = contentStyle.transition;\n\n    if (currentHeight === 0) {\n      contentStyle.opacity = 0;\n    }\n  } // Check if user passed aria-hidden prop\n\n\n  var hasAriaHiddenProp = typeof props['aria-hidden'] !== 'undefined';\n  var ariaHidden = hasAriaHiddenProp ? props['aria-hidden'] : height === 0;\n  return React.createElement(\"div\", Object.assign({}, props, {\n    \"aria-hidden\": ariaHidden,\n    className: \"\".concat(animationStateClassNames, \" \").concat(className),\n    style: componentStyle\n  }), React.createElement(\"div\", {\n    className: contentClassName,\n    style: contentStyle,\n    ref: contentElement\n  }, children));\n};\n\nexport default AnimateHeight;","map":null,"metadata":{},"sourceType":"module"}